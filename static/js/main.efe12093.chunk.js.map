{"version":3,"sources":["Todo.js","TodoList.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Todo","this","props","done","className","id","title","desc","send","reply","rate","Component","TodoList","todos","map","todo","key","setTodoStatus","Form","onSubmit","handleSubmit","name","value","placeholder","type","onClick","handleDelete","App","i","localStorage","length","prevTodos","JSON","parse","getItem","push","state","countTodo","e","preventDefault","target","slice","setState","obj","opp","stringify","setItem","clickTodo","console","log","removeItem","window","location","reload","Link","href","width","height","layout","data","margin","top","right","bottom","left","domain","dataKey","stroke","barSize","fillOpacity","fill","bind","styled","a","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.efe12093.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './css/todo.css';\r\n\r\nclass Todo extends Component {\r\n\r\n  render() {\r\n    const className = 'undone';\r\n    const link = this.props.done ? '元に戻す' : '完了!';\r\n    return (\r\n      <li className={className}>\r\n        <span>{this.props.id}</span>\r\n        <span>:{this.props.title}</span>\r\n        {/* <a href=\"\" onClick={(e) => { e.preventDefault(); this.props.setTodoStatus(this.props) }}>{link}</a> */}\r\n        <p>{this.props.desc}</p>\r\n        <span>送信数:{this.props.send}</span>\r\n        <span>返信数:{this.props.reply}</span>\r\n        <p>返信率:{this.props.rate}%</p>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todo;","import React, { Component } from 'react';\r\nimport Todo from './Todo';\r\n\r\nclass TodoList extends Component {\r\n  render() {\r\n    const todos = this.props.todos.map(todo =>\r\n      <Todo \r\n        key={todo.id}\r\n        {...todo}\r\n        setTodoStatus={this.props.setTodoStatus}\r\n      />\r\n    )\r\n\r\n    return (\r\n      <ul>\r\n        {todos}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\nexport default TodoList;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport './css/form.css';\r\n\r\nclass Form extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"form\">\r\n        <form onSubmit={this.props.handleSubmit}>\r\n          {/* <input name=\"title\" type=\"text\" placeholder=\"サービス名\" /><br/> */}\r\n          <select name=\"title\">\r\n            <option value=\"Tinder\">Tinder</option>\r\n            <option value=\"Pairs\">Pairs</option>\r\n            <option value=\"タップル\">タップル</option>\r\n            <option value=\"Omiai\">Omiai</option>\r\n            <option value=\"with\">with</option>\r\n            <option value=\"PCMAX\">PCMAX</option>\r\n            <option value=\"ひまトーク\">ひまトーク</option>\r\n          </select><br/>\r\n\r\n          <textarea name=\"desc\" placeholder=\"送信メッセージ\" /><br />\r\n          <input name=\"send\" type=\"number\" placeholder=\"送信数\" /><br />\r\n          <input name=\"reply\" type=\"number\" placeholder=\"返信数\" /><br />\r\n          <button type=\"submit\">項目を作成</button>\r\n        </form>\r\n        <button onClick={this.props.handleDelete}>全項目を削除</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Form;","import React, { Component } from 'react';\nimport { ComposedChart, XAxis, YAxis, Tooltip, CartesianGrid, Bar } from 'recharts';\nimport styled from 'styled-components';\nimport TodoList from './TodoList'\nimport Form from './Form'\nimport './css/App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    const todos = [];\n    for (let i = 1; i < localStorage.length + 1; i++) {\n      let prevTodos = JSON.parse(localStorage.getItem(i));\n      todos.push(prevTodos);\n    }\n\n\n    this.state = {\n      todos: todos,\n      countTodo: todos.length + 1,\n    }\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const title = e.target.title.value;\n    const desc = e.target.desc.value;\n    const send = e.target.send.value;\n    const reply = e.target.reply.value;\n    const rate = reply / send * 100;\n    const todos = this.state.todos.slice();\n    const countTodo = this.state.countTodo;\n\n    todos.push({\n      id: countTodo,\n      title: title,\n      desc: desc,\n      reply: reply,\n      send: send,\n      rate: rate,\n      done: false,\n    });\n\n    this.setState({ todos })\n    this.setState({ countTodo: countTodo + 1 })\n\n    let obj = {\n      id: countTodo,\n      title: title,\n      desc: desc,\n      reply: reply,\n      send: send,\n      rate: rate,\n    }\n\n    let opp = JSON.stringify(obj);\n    localStorage.setItem(countTodo, opp);\n\n    e.target.title.value = '';\n    e.target.desc.value = '';\n    e.target.send.value = '';\n    e.target.reply.value = '';\n  }\n\n  setTodoStatus(clickTodo) {\n    const todos = this.state.todos.slice();\n    const todo = todos[clickTodo.id - 1];\n    todo.done = !todo.done;\n    todos[clickTodo.id - 1] = todo;\n    this.setState({ todos });\n  }\n\n  handleDelete() {\n    console.log(localStorage.length)\n    for (let i = 1; i < localStorage.length + 100; i++) {\n      localStorage.removeItem(i)\n    }\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"left\">\n          <h1>ReplyRate</h1>\n          <Link href=''>リンクです</Link>\n          <ComposedChart　　//グラフ全体のサイズや位置、データを指定。場合によってmarginで上下左右の位置を指定する必要あり。\n            width={600}  //グラフ全体の幅を指定\n            height={280}  //グラフ全体の高さを指定\n            layout=\"vertical\" //グラフのX軸とY軸を入れ替え\n            data={this.state.todos}   //Array型のデータを指定\n            margin={{ top: 20, right: 60, bottom: 0, left: 150 }}  //marginを指定\n          >\n            <XAxis  //X軸に関する設定\n              type=\"number\" //データタイプをnumberに変更。デフォルトではcategoryになっている\n              domain={[0, 'dataMax']} //軸の表示領域を指定\n            />\n            <YAxis //Y軸に関する設定\n              type=\"category\" //データタイプをcategoryに変更\n              dataKey='desc' //Array型のデータの、Y軸に表示したい値のキーを指定\n            />\n            <Tooltip /> ////hoverさせた時に具体的な値を表示させるように指定\n            <CartesianGrid  //グラフのグリッドを指定\n              stroke=\"#fff\"  //グリッド線の色を指定\n            />\n            <Bar\n              dataKey='rate'\n              barSize={20}\n              stroke=\"rgba(34, 80, 162, 0.2)\"\n              fillOpacity={1}\n              fill=\"#005D4D\"\n            />\n          </ComposedChart>\n\n          <Form\n            handleSubmit={this.handleSubmit.bind(this)}\n            handleDelete={this.handleDelete.bind(this)}\n          />\n        </div>\n\n        <div className=\"right\">\n          <TodoList\n            todos={this.state.todos}\n            setTodoStatus={this.setTodoStatus.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n\nconst Link = styled.a`\n  color: #fff;\n`;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}